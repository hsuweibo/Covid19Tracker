{"version":3,"sources":["assets/globe.jpg","components/Spinner/Spinner.module.css","Constants/CountTypes.js","Data/WorldometersData.js","Constants/Countries.js","components/OverviewContainer/CountBox/CountBox.js","components/Spinner/Spinner.js","components/Select/Select.js","components/Select/CountrySelect.js","components/OverviewContainer/OverviewContainer.js","components/ChartContainer/DailyChangeChart/DailyChangeChart.js","components/Select/CountTypeSelect.js","Constants/Duration.js","components/Select/DurationSelect.js","Data/JHUData.js","components/ChartContainer/ChartContainer.js","components/TableContainer/CountryCountTable/CountryCountTable.js","components/TableContainer/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RECOVERED","DEATHS","getOverviewData","fetch","then","response","json","fetchedData","processedData","datum","country","filterList","includes","cases","todayCases","CountTypes","deaths","todayDeaths","recovered","todayRecovered","countryInfo","flag","worldwideData","GlobePic","useStyle","makeStyles","theme","root","width","padding","boxSizing","position","textAlign","highlight","display","top","left","transform","height","backgroundColor","props","blue","red","green","countType","name","CountBox","title","classes","className","Typography","variant","numeral","newCount","format","color","totalCount","Spinner","styles","ldsRoller","useStyles","option","fontSize","Select","Autocomplete","options","value","disableClearable","autoHighlight","onChange","onSelect","getOptionLabel","renderOption","renderInput","params","TextField","label","size","inputProps","autoComplete","readOnly","CountrySelect","countries","OverviewContainer","state","selectedCountry","data","loadComplete","countrySelectHandler","event","setState","content","this","countrySelect","style","margin","Object","keys","selectedCountryData","Fragment","Grid","container","item","xs","sm","Card","CardContent","align","Component","withStyles","breakpoints","down","settings","borderColor","labelText","chartConfig","type","hover","intersect","tooltips","mode","axis","displayColors","callbacks","tooltipItem","moment","labels","index","legend","scales","xAxes","afterBuildTicks","ticks","map","tick","maxRotation","yAxes","afterDataLimits","min","afterTickToLabelConversion","i","precision","DailyChangeChart","canvasRef","React","createRef","chart","propsDataToChartData","datasets","values","datasetIndex","Chart","current","getContext","update","ref","CountTypeSelect","DurationSelect","mapping","accumulatedToDelta","originalData","delta","prevCount","entries","currDate","currCount","toISODateStr","mergeDelta","delta1","delta2","date","dateString","pattern","match","year","groups","month","length","day","ChartContainer","selectedCountType","selectedDuration","selectedData","countTypeSelectHandler","_event","updateSelectedData","durationSelectHandler","prevState","range","slice","count","duration","timeline","selectBar","countTypeSelect","durationSelect","flexWrap","descendingComparator","a","b","orderBy","TableHeader","order","onRequestSort","selectedColumns","columns","headers","column","numeric","disablePadding","TableHead","TableRow","h","TableCell","key","sortDirection","TableSortLabel","active","direction","onClick","visuallyHidden","border","clip","overflow","CountryCountTable","rows","defaultOrderBy","useState","setOrder","setOrderBy","Paper","TableContainer","Table","stickyHeader","table","aria-labelledby","aria-label","TableBody","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","row","countryCell","component","scope","alignItems","src","alt","verticalAlign","marginRight","selectedCells","col","role","tabIndex","ListContainer","convertDataToRows","tableRoot","cardContent","titleFlexItem","tableFlexItem","flexDirection","flex","flexBasis","paddingTop","spacing","minHeight","gridContainer","gridTemplateColumns","gridGap","maxWidth","overviewGridItem","gridColumn","gridRow","chartGridItem","listGridItem","appBar","footer","App","AppBar","Toolbar","flexGrow","letterSpacing","fontFamily","Link","href","target","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0aa8f659.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/globe.1a59560a.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRoller\":\"Spinner_ldsRoller__1PjlX\"};","export const ACTIVE = \"Cases\";\r\nexport const RECOVERED = \"Recovered\";\r\nexport const DEATHS = \"Deaths\";\r\nexport const NEW_ACTIVE = \"New Cases\";\r\nexport const NEW_RECOVERED = \"New Recovered\";\r\nexport const NEW_DEATHS = \"New Deaths\";\r\n","import * as Countries from \"../Constants/Countries\";\r\nimport * as CountTypes from \"../Constants/CountTypes\";\r\nimport GlobePic from \"../assets/globe.jpg\";\r\n\r\n/* Return a Promise. The resolved value is an object mapping each country to a collection of data: \r\ntoday's new, and total accumulated death/recovered/cases count. \r\nThe object has the form: \r\n{\r\n  [country1]: {\r\n    cases: ...,\r\n    newCases: ...,\r\n    deaths: ...,\r\n    newDeaths: ...,\r\n    recovered: ...,\r\n    newRecovered: ...,\r\n    flag: [url to flag image], \r\n  },\r\n  ...,\r\n  'Worldwide': {...}\r\n}\r\n*/\r\nexport const getOverviewData = () => {\r\n  return fetch(\"https://disease.sh/v3/covid-19/countries?yesterday=true\")\r\n    .then((response) => response.json())\r\n    .then((fetchedData) => {\r\n      const processedData = {};\r\n      for (let datum of fetchedData) {\r\n        const country = datum.country;\r\n        if (!filterList.includes(country)) {\r\n          processedData[country] = {\r\n            [CountTypes.ACTIVE]: datum.cases,\r\n            [CountTypes.NEW_ACTIVE]: datum.todayCases,\r\n            [CountTypes.DEATHS]: datum.deaths,\r\n            [CountTypes.NEW_DEATHS]: datum.todayDeaths,\r\n            [CountTypes.RECOVERED]: datum.recovered,\r\n            [CountTypes.NEW_RECOVERED]: datum.todayRecovered,\r\n            flag: datum.countryInfo.flag,\r\n          };\r\n        }\r\n      }\r\n      return processedData;\r\n    })\r\n    .then((processedData) => {\r\n      return fetch(\"https://disease.sh/v3/covid-19/all?yesterday=true\")\r\n        .then((response) => response.json())\r\n        .then((fetchedData) => {\r\n          const worldwideData = {\r\n            [CountTypes.ACTIVE]: fetchedData.cases,\r\n            [CountTypes.NEW_ACTIVE]: fetchedData.todayDeaths,\r\n            [CountTypes.DEATHS]: fetchedData.deaths,\r\n            [CountTypes.NEW_DEATHS]: fetchedData.todayDeaths,\r\n            [CountTypes.RECOVERED]: fetchedData.recovered,\r\n            [CountTypes.NEW_RECOVERED]: fetchedData.todayRecovered,\r\n            flag: GlobePic,\r\n          };\r\n\r\n          return { [Countries.WORLDWIDE]: worldwideData, ...processedData };\r\n        });\r\n    });\r\n};\r\n\r\n// These are \"country names\" returned by the Worldometer API, however, these are not real countries.\r\nconst filterList = [\"MS Zaandam\", \"Diamond Princess\"];\r\n","export const WORLDWIDE = \"Worldwide\";\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport numeral from \"numeral-es6\";\r\n\r\nimport { blue, red, green } from \"@material-ui/core/colors\";\r\n\r\nimport * as CountTypes from \"../../../Constants/CountTypes\";\r\n\r\nconst useStyle = makeStyles(\r\n  (theme) => ({\r\n    root: {\r\n      width: \"100%\",\r\n      padding: \"1em\",\r\n      boxSizing: \"border-box\",\r\n      position: \"relative\",\r\n      textAlign: \"center\",\r\n    },\r\n\r\n    highlight: {\r\n      position: \"absolute\",\r\n      display: \"block\",\r\n      width: \"80%\",\r\n      top: \"1%\",\r\n      left: \"50%\",\r\n      transform: \"translateX(-50%)\",\r\n      height: \"5px\",\r\n      backgroundColor: (props) => {\r\n        const mapping = {\r\n          [CountTypes.ACTIVE]: blue[\"A200\"],\r\n          [CountTypes.DEATHS]: red[\"A200\"],\r\n          [CountTypes.RECOVERED]: green[\"A200\"],\r\n        };\r\n        return mapping[props.countType];\r\n      },\r\n    },\r\n  }),\r\n  { name: \"CountBox\" }\r\n);\r\n\r\nconst CountBox = (props) => {\r\n  const classes = useStyle(props);\r\n  let title;\r\n  switch (props.countType) {\r\n    case CountTypes.ACTIVE:\r\n      title = \"New cases\";\r\n      break;\r\n    case CountTypes.DEATHS:\r\n      title = \"New deaths\";\r\n      break;\r\n    case CountTypes.RECOVERED:\r\n      title = \"New recovered\";\r\n      break;\r\n    default:\r\n      title = \"Unknown\";\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.highlight}></div>\r\n      <Typography variant=\"body1\">{title}</Typography>\r\n      <Typography variant=\"h5\">\r\n        {numeral(props.newCount).format(\"0.[00]a\")}\r\n      </Typography>\r\n      <Typography variant=\"body1\" color=\"textSecondary\">\r\n        {numeral(props.totalCount).format(\"0.[00]a\")} total\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountBox;\r\n\r\nCountBox.propTypes = {\r\n  countType: PropTypes.oneOf([\r\n    CountTypes.RECOVERED,\r\n    CountTypes.DEATHS,\r\n    CountTypes.ACTIVE,\r\n  ]),\r\n  newCount: PropTypes.number,\r\n  totalCount: PropTypes.number,\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Spinner.module.css\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className={styles.ldsRoller}>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","/* eslint-disable no-use-before-define */\r\nimport React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles(\r\n  {\r\n    option: {\r\n      fontSize: \"1rem\",\r\n    },\r\n\r\n    root: {\r\n      padding: \"6px 2px\",\r\n    },\r\n  },\r\n  { name: \"Select\" }\r\n);\r\n\r\nexport default function Select(props) {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <Autocomplete\r\n      options={props.options}\r\n      classes={{\r\n        option: classes.option,\r\n        root: classes.root,\r\n      }}\r\n      value={props.value}\r\n      disableClearable\r\n      autoHighlight\r\n      onChange={props.onSelect}\r\n      getOptionLabel={(option) => option}\r\n      renderOption={(option) => <span>{option}</span>}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label={props.label}\r\n          size=\"small\"\r\n          variant=\"outlined\"\r\n          inputProps={{\r\n            ...params.inputProps,\r\n            autoComplete: \"off\",\r\n            readOnly: props.readOnly,\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nSelect.propTypes = {\r\n  onSelect: PropTypes.func, // The cb func when something is selected. First arg is the events object. Second arg is the selected value.\r\n  options: PropTypes.arrayOf(PropTypes.string), // A list of option labels for the dropdown select\r\n  label: PropTypes.string, // The label string,\r\n  value: PropTypes.string, // The controlled selected value. Should be one of 'options'\r\n  readOnly: PropTypes.bool, // Whether or not typed input is enabled\r\n};\r\n","/* eslint-disable no-use-before-define */\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"./Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles(\r\n  {\r\n    root: {\r\n      width: \"300px\",\r\n    },\r\n  },\r\n  { name: \"CountrySelect\" }\r\n);\r\n\r\nexport default function CountrySelect(props) {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <Select\r\n      {...props}\r\n      classes={{ root: classes.root }}\r\n      options={props.countries}\r\n      readOnly={false}\r\n      label=\"Country\"\r\n    />\r\n  );\r\n}\r\n\r\nCountrySelect.propTypes = {\r\n  value: PropTypes.string, // The controlled selected value (not necessary same as the input value, i.e., the typed-in value)\r\n  onSelect: PropTypes.func, // The cb func when something is selected. First arg is the events object. Second arg is the selected value.\r\n  countries: PropTypes.arrayOf(PropTypes.string), // The list of countries available for select\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { getOverviewData } from \"../../Data/WorldometersData\";\r\n\r\nimport CountBox from \"./CountBox/CountBox\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport CountrySelect from \"../Select/CountrySelect\";\r\nimport * as CountTypes from \"../../Constants/CountTypes\";\r\nimport * as Countries from \"../../Constants/Countries\";\r\n\r\nconst styles = (theme) => ({\r\n  countrySelect: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n});\r\n\r\nclass OverviewContainer extends Component {\r\n  state = {\r\n    selectedCountry: null,\r\n    data: null,\r\n    loadComplete: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    getOverviewData().then((data) => {\r\n      this.setState({\r\n        data: data,\r\n        loadComplete: true,\r\n        selectedCountry: Countries.WORLDWIDE, //The default selected country once loaded\r\n      });\r\n    });\r\n  }\r\n\r\n  countrySelectHandler = (event, value) => {\r\n    this.setState({ selectedCountry: value });\r\n  };\r\n\r\n  render() {\r\n    let content;\r\n    if (!this.state.loadComplete) {\r\n      content = <Spinner></Spinner>;\r\n    } else {\r\n      const countrySelect = (\r\n        <div style={{ margin: \"8px\" }}>\r\n          <CountrySelect\r\n            countries={Object.keys(this.state.data)}\r\n            onSelect={this.countrySelectHandler}\r\n            value={this.state.selectedCountry}\r\n            classes={{ root: this.props.classes.countrySelect }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      const selectedCountryData = this.state.data[this.state.selectedCountry];\r\n      content = (\r\n        <React.Fragment>\r\n          {countrySelect}\r\n\r\n          <Grid container>\r\n            <Grid item xs={12} sm={4}>\r\n              <CountBox\r\n                countType={CountTypes.ACTIVE}\r\n                newCount={selectedCountryData[CountTypes.NEW_ACTIVE]}\r\n                totalCount={selectedCountryData[CountTypes.ACTIVE]}\r\n              ></CountBox>\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n              <CountBox\r\n                countType={CountTypes.DEATHS}\r\n                newCount={selectedCountryData[CountTypes.NEW_DEATHS]}\r\n                totalCount={selectedCountryData[CountTypes.DEATHS]}\r\n              ></CountBox>\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n              <CountBox\r\n                countType={CountTypes.RECOVERED}\r\n                newCount={selectedCountryData[CountTypes.NEW_RECOVERED]}\r\n                totalCount={selectedCountryData[CountTypes.RECOVERED]}\r\n              ></CountBox>\r\n            </Grid>\r\n          </Grid>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            Cases Overview\r\n          </Typography>\r\n          {content}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { name: \"OverviewContainer\" })(\r\n  OverviewContainer\r\n);\r\n","import { blue, red, green } from \"@material-ui/core/colors\";\r\nimport Chart from \"chart.js\";\r\nimport React, { Component } from \"react\";\r\nimport * as CountTypes from \"../../../Constants/CountTypes\";\r\nimport PropTypes from \"prop-types\";\r\nimport numeral from \"numeral-es6\";\r\nimport moment from \"moment\";\r\n\r\nconst settings = {\r\n  [CountTypes.ACTIVE]: {\r\n    borderColor: blue[\"A100\"],\r\n    backgroundColor: blue[200],\r\n    labelText: \"cases\",\r\n  },\r\n  [CountTypes.DEATHS]: {\r\n    borderColor: red[\"A100\"],\r\n    backgroundColor: red[200],\r\n    labelText: \"deaths\",\r\n  },\r\n  [CountTypes.RECOVERED]: {\r\n    borderColor: green[\"A100\"],\r\n    backgroundColor: green[200],\r\n    labelText: \"recoveries\",\r\n  },\r\n};\r\n\r\nconst chartConfig = {\r\n  type: \"line\",\r\n  data: {}, // to be specified at runtime\r\n  options: {\r\n    hover: {\r\n      intersect: true,\r\n    },\r\n    tooltips: {\r\n      mode: \"nearest\",\r\n      axis: \"x\",\r\n      intersect: false,\r\n      displayColors: false, // disable showing dataset colors (there will always only be one on the chart, so no reason to show)\r\n      callbacks: {\r\n        label: null, // to be specified at run-time\r\n        title: function (tooltipItem, data) {\r\n          return moment(data.labels[tooltipItem[0].index]).format(\r\n            \"MMM DD, YYYY\"\r\n          );\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          display: true,\r\n          afterBuildTicks: function (axis, ticks) {\r\n            // Add surrounding spaces to prevent labels cluttering\r\n            return ticks.map(\r\n              (tick, index) => ` ${moment(tick).format(\"MMM DD\")} `\r\n            );\r\n          },\r\n\r\n          ticks: {\r\n            maxRotation: 0,\r\n            fontSize: 11,\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          // when the data is all 0, chart.js shows negative values for y-axis. This callback changes that behavior.\r\n          afterDataLimits: (axis) => {\r\n            if (axis.min < 0) {\r\n              axis.min = 0;\r\n            }\r\n          },\r\n          afterTickToLabelConversion: function (axis) {\r\n            for (const i in axis.ticks) {\r\n              axis.ticks[i] = numeral(axis.ticks[i]).format(\"0,0\");\r\n            }\r\n          },\r\n          ticks: {\r\n            precision: 0, // avoids decimal\r\n            fontSize: 11,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nexport default class DailyChangeChart extends Component {\r\n  canvasRef = React.createRef();\r\n  chart = null;\r\n\r\n  constructor(props) {\r\n    super();\r\n\r\n    // Callback function that determines what to generate for a datapoint's tooltip content(label)\r\n    const label = (tooltipItem, data) => {\r\n      return (\r\n        numeral(\r\n          data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]\r\n        ).format(\"0,0\") +\r\n        \" \" +\r\n        settings[this.props.countType].labelText\r\n      );\r\n    };\r\n\r\n    chartConfig.options.tooltips.callbacks.label = label;\r\n  }\r\n\r\n  /* Change the props data to a form accepted by the chart.js API. */\r\n  propsDataToChartData = () => {\r\n    const data = {\r\n      // The keys are originally of the form \"MM/DD/YY\". Change it to a more tradition form, like 'Jan 04'.\r\n      labels: Object.keys(this.props.data),\r\n      datasets: [\r\n        {\r\n          // Label is by default used in legend and tooltip, but since we don't use legend, and the tooltip is customized,\r\n          // this field can actually be anything\r\n          label: settings[this.props.countType].labelText,\r\n          backgroundColor: settings[this.props.countType].backgroundColor,\r\n          borderColor: settings[this.props.countType].borderColor,\r\n          data: Object.values(this.props.data),\r\n        },\r\n      ],\r\n    };\r\n\r\n    return data;\r\n  };\r\n\r\n  componentDidMount() {\r\n    chartConfig.data = this.propsDataToChartData();\r\n\r\n    this.chart = new Chart(\r\n      this.canvasRef.current.getContext(\"2d\"),\r\n      chartConfig\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.chart.data = this.propsDataToChartData();\r\n    this.chart.update();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <canvas ref={this.canvasRef}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDailyChangeChart.propTypes = {\r\n  // The data. Each key should be a date of the form 'MM/DD/YY'. The values are numbers.\r\n  data: PropTypes.object,\r\n  countType: PropTypes.oneOf([\r\n    CountTypes.ACTIVE,\r\n    CountTypes.DEATHS,\r\n    CountTypes.RECOVERED,\r\n  ]),\r\n};\r\n","/* eslint-disable no-use-before-define */\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"./Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport * as CountTypes from \"../../Constants/CountTypes\";\r\n\r\nconst useStyles = makeStyles(\r\n  {\r\n    root: {\r\n      width: \"150px\",\r\n    },\r\n  },\r\n  { name: \"CountTypeSelect\" }\r\n);\r\n\r\nexport default function CountTypeSelect(props) {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <Select\r\n      {...props}\r\n      classes={{ root: classes.root }}\r\n      options={[CountTypes.ACTIVE, CountTypes.DEATHS, CountTypes.RECOVERED]}\r\n      readOnly={true}\r\n      label=\"Type\"\r\n    />\r\n  );\r\n}\r\n\r\nCountTypeSelect.propTypes = {\r\n  onSelect: PropTypes.func, // The cb func when something is selected. First arg is the events object. Second arg is the selected value.\r\n  value: PropTypes.oneOf([\r\n    CountTypes.ACTIVE,\r\n    CountTypes.DEATHS,\r\n    CountTypes.RECOVERED,\r\n  ]), // The controlled selected value\r\n};\r\n","export const ONE_WEEK = \"1 week\";\r\nexport const TWO_WEEKS = \"2 weeks\";\r\nexport const ONE_MONTH = \"1 month\";\r\nexport const ALL = \"All\";\r\n","/* eslint-disable no-use-before-define */\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"./Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport * as Duration from \"../../Constants/Duration\";\r\n\r\nconst useStyles = makeStyles(\r\n  {\r\n    root: {\r\n      width: \"130px\",\r\n    },\r\n  },\r\n  { name: \"DurationSelect\" }\r\n);\r\n\r\nexport default function DurationSelect(props) {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <Select\r\n      {...props}\r\n      classes={{ root: classes.root }}\r\n      options={[\r\n        Duration.ONE_WEEK,\r\n        Duration.TWO_WEEKS,\r\n        Duration.ONE_MONTH,\r\n        Duration.ALL,\r\n      ]}\r\n      readOnly={true}\r\n      label=\"Duration\"\r\n    />\r\n  );\r\n}\r\n\r\nDurationSelect.propTypes = {\r\n  onSelect: PropTypes.func, // The cb func when something is selected. First arg is the events object. Second arg is the selected value.\r\n  value: PropTypes.oneOf([\r\n    Duration.ONE_WEEK,\r\n    Duration.TWO_WEEKS,\r\n    Duration.ONE_MONTH,\r\n    Duration.ALL,\r\n  ]), // The controlled selected value\r\n};\r\n","import * as Countries from \"../Constants/Countries\";\r\nimport * as CountTypes from \"../Constants/CountTypes\";\r\nimport * as Duration from \"../Constants/Duration\";\r\n\r\nconst mapping = {\r\n  [Duration.ONE_MONTH]: 30,\r\n  [Duration.ALL]: \"all\",\r\n  [Duration.ONE_WEEK]: 7,\r\n};\r\n/* Return a promise object. The resolved value is an object that maps each country to its daily change data. \r\nThe object has the form\r\n{\r\n  [country1]: {\r\n    'cases': {[date1]: [deltaCount], [date2]: [deltaCount], ...}\r\n    'deaths': {[date1]: [deltaCount], [date2]: [deltaCount], ...}\r\n    'recovered': {[date1]: [deltaCount], [date2]: [deltaCount], ...}\r\n  }\r\n  [country2]: ...,\r\n} */\r\nconst getHistoricalData = (duration) => {\r\n  return fetch(\r\n    `https://disease.sh/v3/covid-19/historical?lastdays=${mapping[duration]}`\r\n  )\r\n    .then((response) => response.json())\r\n    .then((fetchedData) => {\r\n      const processedData = {};\r\n      for (let datum of fetchedData) {\r\n        const country = datum.country;\r\n        if (!filterList.includes(country)) {\r\n          if (!processedData[country]) {\r\n            processedData[country] = {\r\n              [CountTypes.ACTIVE]: accumulatedToDelta(datum.timeline.cases),\r\n              [CountTypes.DEATHS]: accumulatedToDelta(datum.timeline.deaths),\r\n              [CountTypes.RECOVERED]: accumulatedToDelta(\r\n                datum.timeline.recovered\r\n              ),\r\n            };\r\n          } else {\r\n            mergeDelta(\r\n              processedData[country][CountTypes.ACTIVE],\r\n              accumulatedToDelta(datum.timeline.cases)\r\n            );\r\n\r\n            mergeDelta(\r\n              processedData[country][CountTypes.DEATHS],\r\n              accumulatedToDelta(datum.timeline.deaths)\r\n            );\r\n\r\n            mergeDelta(\r\n              processedData[country][CountTypes.RECOVERED],\r\n              accumulatedToDelta(datum.timeline.recovered)\r\n            );\r\n          }\r\n        }\r\n      }\r\n      return processedData;\r\n    })\r\n    .then((processedData) =>\r\n      fetch(\r\n        `https://disease.sh/v3/covid-19/historical/all?lastdays=${mapping[duration]}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((fetchedData) => {\r\n          const worldwideData = {\r\n            [CountTypes.ACTIVE]: accumulatedToDelta(fetchedData.cases),\r\n            [CountTypes.DEATHS]: accumulatedToDelta(fetchedData.deaths),\r\n            [CountTypes.RECOVERED]: accumulatedToDelta(fetchedData.recovered),\r\n          };\r\n\r\n          return { [Countries.WORLDWIDE]: worldwideData, ...processedData };\r\n        })\r\n    );\r\n};\r\n\r\n/* Given an object with cumulated counts up to each date, calculate and convert to an object mapping each date to the incremental difference\r\nof that day's count relative to the day before. The first day is skipped. ISO formatted date string is used in the returned object.\r\nE.g. {9/1/20: 3, 9/2/20:10, 9/3/20:12} is converted to {2020-09-02:7, 2020-09-03:2} */\r\nconst accumulatedToDelta = (originalData) => {\r\n  const delta = {};\r\n  let prevCount = null;\r\n  for (const [currDate, currCount] of Object.entries(originalData)) {\r\n    if (prevCount !== null) {\r\n      delta[toISODateStr(currDate)] = currCount - prevCount;\r\n    }\r\n    prevCount = currCount;\r\n  }\r\n  return delta;\r\n};\r\n\r\nconst mergeDelta = (delta1, delta2) => {\r\n  for (const date of Object.keys(delta1)) {\r\n    delta1[date] += delta2[date];\r\n  }\r\n};\r\n\r\n/* Convert the given date string format to ISO compliant date string format.\r\nFor example, from '09/13/20' to '2020-09-13'\r\n*/\r\nconst toISODateStr = (dateString) => {\r\n  const pattern = /^(?<month>\\d?\\d)\\/(?<day>\\d?\\d)\\/(?<year>\\d\\d)$/;\r\n  const match = dateString.match(pattern);\r\n  const year = `20${match.groups.year}`;\r\n  const month =\r\n    match.groups.month.length === 1\r\n      ? `0${match.groups.month}`\r\n      : match.groups.month;\r\n  const day =\r\n    match.groups.day.length === 1 ? `0${match.groups.day}` : match.groups.day;\r\n  const res = `${year}-${month}-${day}`;\r\n  return res;\r\n};\r\n\r\nexport { getHistoricalData };\r\n\r\n// These are \"country names\" returned by the JHU API, however, these are not real countries.\r\nconst filterList = [\"MS Zaandam\", \"Diamond Princess\"];\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardContent, Typography, withStyles } from \"@material-ui/core\";\r\nimport DailyChangeChart from \"./DailyChangeChart/DailyChangeChart\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\nimport CountrySelect from \"../Select/CountrySelect\";\r\nimport CountTypeSelect from \"../Select/CountTypeSelect\";\r\nimport DurationSelect from \"../Select/DurationSelect\";\r\n\r\nimport { getHistoricalData } from \"../../Data/JHUData\";\r\nimport * as CountTypes from \"../../Constants/CountTypes\";\r\nimport * as Countries from \"../../Constants/Countries\";\r\n\r\nimport * as Duration from \"../../Constants/Duration\";\r\n\r\nconst styles = (theme) => ({\r\n  selectBar: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    margin: \"8px\",\r\n  },\r\n\r\n  countTypeSelect: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  countrySelect: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  durationSelect: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n});\r\n\r\nclass ChartContainer extends Component {\r\n  state = {\r\n    selectedCountry: null,\r\n    selectedCountType: null,\r\n    selectedDuration: null,\r\n    data: null,\r\n    selectedData: null,\r\n    loadComplete: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    getHistoricalData(Duration.ALL).then((data) => {\r\n      this.setState({\r\n        data: data,\r\n        loadComplete: true,\r\n        selectedCountry: Countries.WORLDWIDE,\r\n        selectedCountType: CountTypes.ACTIVE,\r\n        selectedDuration: Duration.ONE_MONTH, // Default duration\r\n      });\r\n      this.updateSelectedData();\r\n    });\r\n  }\r\n\r\n  countTypeSelectHandler = (_event, value) => {\r\n    this.setState({ selectedCountType: value });\r\n    this.updateSelectedData();\r\n  };\r\n\r\n  countrySelectHandler = (_event, value) => {\r\n    this.setState({ selectedCountry: value });\r\n    this.updateSelectedData();\r\n  };\r\n\r\n  durationSelectHandler = (_event, value) => {\r\n    this.setState({ selectedDuration: value });\r\n    this.updateSelectedData();\r\n  };\r\n\r\n  updateSelectedData = () => {\r\n    this.setState((prevState) => {\r\n      const {\r\n        selectedDuration,\r\n        data,\r\n        selectedCountry,\r\n        selectedCountType,\r\n      } = prevState;\r\n      let range;\r\n      switch (selectedDuration) {\r\n        case Duration.ONE_WEEK:\r\n          range = Object.entries(\r\n            data[selectedCountry][selectedCountType]\r\n          ).slice(-7);\r\n          break;\r\n        case Duration.TWO_WEEKS:\r\n          range = Object.entries(\r\n            data[selectedCountry][selectedCountType]\r\n          ).slice(-14);\r\n          break;\r\n        case Duration.ONE_MONTH:\r\n          range = Object.entries(\r\n            data[selectedCountry][selectedCountType]\r\n          ).slice(-30);\r\n          break;\r\n        case Duration.ALL:\r\n          range = Object.entries(\r\n            data[selectedCountry][selectedCountType]\r\n          ).slice();\r\n          break;\r\n        default:\r\n          range = [];\r\n      }\r\n      const selectedData = {};\r\n      for (const [date, count] of range) {\r\n        selectedData[date] = count;\r\n      }\r\n      return { ...prevState, selectedData: selectedData };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let content;\r\n    if (!this.state.selectedData) {\r\n      content = <Spinner />;\r\n    } else {\r\n      content = (\r\n        <React.Fragment>\r\n          <div className={this.props.classes.selectBar}>\r\n            <CountrySelect\r\n              countries={Object.keys(this.state.data)}\r\n              onSelect={this.countrySelectHandler}\r\n              value={this.state.selectedCountry}\r\n              classes={{ root: this.props.classes.countrySelect }}\r\n            />\r\n            <CountTypeSelect\r\n              value={this.state.selectedCountType}\r\n              onSelect={this.countTypeSelectHandler}\r\n              classes={{ root: this.props.classes.countTypeSelect }}\r\n            />\r\n            <DurationSelect\r\n              onSelect={this.durationSelectHandler}\r\n              value={this.state.selectedDuration}\r\n              classes={{ root: this.props.classes.durationSelect }}\r\n            />\r\n          </div>\r\n\r\n          <DailyChangeChart\r\n            countType={this.state.selectedCountType}\r\n            data={this.state.selectedData}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            Daily Changes\r\n          </Typography>\r\n          {content}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { name: \"ChartContainer\" })(ChartContainer);\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\n\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport numeral from \"numeral-es6\";\r\nimport * as CountTypes from \"../../../Constants/CountTypes\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n// array is an array of rows object\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    // pass in the entire row. If the result is equivalent, compare the index.\r\n    // Whichever comes first has higher index\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n// A component for the table header\r\nfunction TableHeader(props) {\r\n  const { classes, order, orderBy, onRequestSort, selectedColumns } = props;\r\n  const createSortHandler = (column) => (event) => {\r\n    onRequestSort(event, column);\r\n  };\r\n\r\n  let columns = [\"country\", ...selectedColumns];\r\n\r\n  // Map column names to a label that will be displayed on the table.\r\n  const labels = {\r\n    [CountTypes.ACTIVE]: \"Cases\",\r\n    [CountTypes.DEATHS]: \"Deaths\",\r\n    [CountTypes.RECOVERED]: \"Recovered\",\r\n    [CountTypes.NEW_ACTIVE]: \"New Cases\",\r\n    [CountTypes.NEW_DEATHS]: \"New Deaths\",\r\n    [CountTypes.NEW_RECOVERED]: \"New Recovered\",\r\n    country: \"Country\",\r\n  };\r\n\r\n  // A configuration object used in return statement\r\n  let headers = columns.map((column) => ({\r\n    column: column,\r\n    label: labels[column],\r\n    numeric: column === \"country\" ? false : true,\r\n    disablePadding: false,\r\n  }));\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headers.map((h) => (\r\n          <TableCell\r\n            key={h.column}\r\n            align={h.numeric ? \"right\" : \"left\"}\r\n            padding={h.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === h.column ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === h.column}\r\n              direction={orderBy === h.column ? order : \"asc\"}\r\n              onClick={createSortHandler(h.column)}\r\n            >\r\n              {h.label}\r\n              {orderBy === h.column ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n  (theme) => ({\r\n    root: {\r\n      width: \"100%\",\r\n    },\r\n\r\n    container: {\r\n      height: \"100%\",\r\n    },\r\n\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: \"rect(0 0 0 0)\",\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: \"hidden\",\r\n      padding: 0,\r\n      position: \"absolute\",\r\n      top: 20,\r\n      width: 1,\r\n    },\r\n  }),\r\n  { name: \"CountryCountTable\" }\r\n);\r\n\r\nexport default function CountryCountTable(props) {\r\n  const { rows, selectedColumns, defaultOrderBy } = props;\r\n\r\n  const classes = useStyles(props);\r\n  const [order, setOrder] = React.useState(\"desc\");\r\n  const [orderBy, setOrderBy] = React.useState(defaultOrderBy);\r\n\r\n  const handleRequestSort = (event, column) => {\r\n    // Any clicks on a non-active column makes isAsc false, because by default non-active col are always descending\r\n    const isAsc = orderBy === column && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(column);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table\r\n          stickyHeader\r\n          className={classes.table}\r\n          aria-labelledby=\"tableTitle\"\r\n          size=\"small\"\r\n          aria-label=\"country count table\"\r\n        >\r\n          <TableHeader\r\n            classes={classes}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onRequestSort={handleRequestSort}\r\n            selectedColumns={selectedColumns}\r\n          />\r\n          <TableBody>\r\n            {stableSort(rows, getComparator(order, orderBy)).map((row) => {\r\n              const countryCell = (\r\n                <TableCell component=\"th\" scope=\"row\" padding=\"default\">\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <img\r\n                      src={row.flag}\r\n                      alt=\"flag\"\r\n                      width=\"20px\"\r\n                      style={{\r\n                        verticalAlign: \"middle\",\r\n                        marginRight: \"5px\",\r\n                      }}\r\n                    ></img>\r\n                    {row.country}\r\n                  </div>\r\n                </TableCell>\r\n              );\r\n\r\n              const selectedCells = selectedColumns.map((col) => (\r\n                <TableCell align=\"right\" key={col}>\r\n                  {numeral(row[col]).format(\"0,0\")}\r\n                </TableCell>\r\n              ));\r\n\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.country}>\r\n                  {countryCell}\r\n                  {selectedCells}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nCountryCountTable.propTypes = {\r\n  // An array of the column names to display for the dataset. Valid column names are enumerated by the CountTypes constants.\r\n  //'country' is also a valid column name, but is always selected by default.\r\n  columns: PropTypes.arrayOf(\r\n    PropTypes.oneOf([\r\n      CountTypes.ACTIVE,\r\n      CountTypes.DEATHS,\r\n      CountTypes.RECOVERED,\r\n      CountTypes.NEW_ACTIVE,\r\n      CountTypes.NEW_DEATHS,\r\n      CountTypes.NEW_RECOVERED,\r\n    ])\r\n  ),\r\n  // The rows of data. Each row represent a country. 'country' and each of the CountTypes constants represent a column of the row.\r\n  rows: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      country: PropTypes.string,\r\n      flag: PropTypes.string, // A url to an img of the country's national flag\r\n      [CountTypes.ACTIVE]: PropTypes.number,\r\n      [CountTypes.DEATHS]: PropTypes.number,\r\n      [CountTypes.RECOVERED]: PropTypes.number,\r\n      [CountTypes.NEW_ACTIVE]: PropTypes.number,\r\n      [CountTypes.NEW_DEATHS]: PropTypes.number,\r\n      [CountTypes.NEW_RECOVERED]: PropTypes.number,\r\n    })\r\n  ),\r\n\r\n  // The column to sort by; should be a column in the 'columns' props, or the 'country' column\r\n  defaultOrderBy: PropTypes.oneOf([\r\n    \"country\",\r\n    CountTypes.ACTIVE,\r\n    CountTypes.DEATHS,\r\n    CountTypes.RECOVERED,\r\n    CountTypes.NEW_ACTIVE,\r\n    CountTypes.NEW_DEATHS,\r\n    CountTypes.NEW_RECOVERED,\r\n  ]),\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { getOverviewData } from \"../../Data/WorldometersData\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport CountryCountTable from \"./CountryCountTable/CountryCountTable\";\r\n\r\nimport * as CountTypes from \"../../Constants/CountTypes\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    height: \"100%\",\r\n  },\r\n\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"stretch\",\r\n    boxSizing: \"border-box\",\r\n    height: \"100%\",\r\n  },\r\n\r\n  titleFlexItem: {\r\n    flex: \"0 0 auto\",\r\n    flexBasis: \"auto\",\r\n  },\r\n\r\n  tableFlexItem: {\r\n    flex: \"1 0 auto\",\r\n    paddingTop: theme.spacing(2),\r\n  },\r\n\r\n  // Set the height to 0, so that for the calculation of the entire column this component is in, this component's table's height is not taken into account.\r\n  // Set the min-height to 100%, so that once the column height's is resolved/computed and rendered,\r\n  // the tableRoot fills the height of the flex item (which flex-grows to fill the remaining height of the flex-container, which is set to 100% height of the column)\r\n  tableRoot: {\r\n    minHeight: \"100%\",\r\n    height: \"0\",\r\n  },\r\n});\r\n\r\nclass ListContainer extends Component {\r\n  state = {\r\n    data: null,\r\n    loadComplete: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    getOverviewData().then((data) =>\r\n      this.setState({ data: data, loadComplete: true })\r\n    );\r\n  }\r\n\r\n  convertDataToRows = () => {\r\n    return Object.keys(this.state.data).map((country) => ({\r\n      country,\r\n      ...this.state.data[country],\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const classes = this.props.classes;\r\n    let table;\r\n    if (!this.state.loadComplete) {\r\n      table = <Spinner />;\r\n    } else {\r\n      table = (\r\n        <CountryCountTable\r\n          selectedColumns={[\r\n            [CountTypes.ACTIVE],\r\n            [CountTypes.DEATHS],\r\n            [CountTypes.RECOVERED],\r\n          ]}\r\n          defaultOrderBy={CountTypes.ACTIVE}\r\n          rows={this.convertDataToRows()}\r\n          classes={{\r\n            root: classes.tableRoot,\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Card className={classes.root}>\r\n        <CardContent className={classes.cardContent}>\r\n          <div className={classes.titleFlexItem}>\r\n            <Typography variant=\"h4\" align=\"center\">\r\n              Cases by Country\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.tableFlexItem}>{table}</div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { name: \"TableContainer\" })(ListContainer);\r\n","import React from \"react\";\nimport { Typography, Link } from \"@material-ui/core\";\nimport OverviewContainer from \"./components/OverviewContainer/OverviewContainer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ChartContainer from \"./components/ChartContainer/ChartContainer\";\nimport TableContainer from \"./components/TableContainer/TableContainer\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(12, 1fr)\",\n    gridGap: \"13px\",\n    padding: \"0.6rem\",\n    maxWidth: theme.breakpoints.values[\"lg\"],\n    margin: \"0 auto\",\n  },\n\n  overviewGridItem: {\n    gridColumn: \"1/8\",\n    gridRow: \"2/3\",\n    [theme.breakpoints.down(\"sm\")]: {\n      gridColumn: \"1/13\",\n    },\n  },\n\n  chartGridItem: {\n    gridColumn: \"1/8\",\n    gridRow: \"3/4\",\n    [theme.breakpoints.down(\"sm\")]: {\n      gridColumn: \"1/13\",\n    },\n  },\n\n  listGridItem: {\n    gridColumn: \"8 /13\",\n    gridRow: \"2/4\",\n    [theme.breakpoints.down(\"sm\")]: {\n      gridColumn: \"1/13\",\n      gridRow: \"4/5\",\n      height: \"500px\",\n    },\n  },\n\n  appBar: {\n    gridColumn: \"1 /13\",\n    gridRow: \"1/2\",\n  },\n\n  footer: {\n    gridColumn: \"1/13\",\n    gridRow: \"4/5\",\n    [theme.breakpoints.down(\"sm\")]: {\n      gridRow: \"5/6\",\n    },\n  },\n\n  // Global styles, overrides the default style for small table cells\n  \"@global\": {\n    \".MuiTableCell-sizeSmall\": {\n      padding: \"6px 10px 6px 6px\",\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\" style={{ backgroundColor: \"#5c3e11\" }}>\n        <Toolbar>\n          <Typography\n            variant=\"h4\"\n            style={{\n              flexGrow: 1,\n              textAlign: \"center\",\n              letterSpacing: \"3px\",\n              color: \"white\",\n            }}\n          >\n            Covid-\n            {/* The favico also uses federo font */}\n            <span style={{ fontFamily: \"Federo, sans-serif\" }}>19</span>\n            Tracker\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <div className={classes.gridContainer}>\n        <div className={classes.appBar}></div>\n        <div className={classes.overviewGridItem}>\n          <OverviewContainer />\n        </div>\n        <div className={classes.chartGridItem}>\n          <ChartContainer />\n        </div>\n        <div className={classes.listGridItem}>\n          <TableContainer />\n        </div>\n        <div className={classes.footer}>\n          <Typography color=\"textSecondary\" align=\"center\" variant=\"body2\">\n            Covid-19 Tracker is powered by React{\" \"}\n            <i className=\"fab fa-react\"></i> and the open data API from{\" \"}\n            <Link href=\"https://disease.sh/\" target=\"_blank\">\n              disease.sh\n            </Link>{\" \"}\n          </Typography>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}